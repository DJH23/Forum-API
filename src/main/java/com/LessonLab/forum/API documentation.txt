# API Documentation

## General Information
- **Title:** API Documentation
- **Version:** v1.0
- **Server URL:** `http://localhost:8080`

## Authentication
This API uses Bearer authentication. You need to include the `Authorization` header with a valid JWT token in your requests.

## Endpoints

### Content Controller

### Update Content
**Endpoint:** `PUT /api/contents/{contentType}/{id}`
**Parameters:**
- `contentType` (path parameter, required, string): Type of content (e.g., "comment", "post").
- `id` (path parameter, required, integer): The ID of the content to update.
- `contentUpdate` (body parameter, required, object): JSON object containing the new content. Must include a `newContent` field.
**Responses:**
- `200 OK`: Content updated successfully. Returns the updated content object.
- `400 Bad Request`: Invalid input. Returns an error message.
- `404 Not Found`: Content not found. Returns an error message.

**Example Request:**
PUT /api/contents/post/1
Authorization: Bearer <token>
Content-Type: application/json

{
    "newContent": "Updated content for the post"
}

**Example Response:**
{
        "id": 1,
        "content": "Updated content for the post"
}

### Get Content by ID
**Endpoint:** `GET /api/contents/{contentType}/get-content-by-id/{id}`
**Parameters:**
- `contentType` (path parameter, required, string): Type of content (e.g., "comment", "post", "thread").
- `id` (path parameter, required, integer): The ID of the content to retrieve.
**Responses:**
- `200 OK`: Content retrieved successfully. Returns the content object.
- `404 Not Found`: Content not found. Returns an error message.

**Example Request:**
GET /api/contents/post/get-content-by-id/1
Authorization: Bearer <token>

**Example Response:**
{
    "id": 1,
    "content": "Content of the post"
}

### Search Content
**Endpoint:** `GET /api/contents/search/{contentType}`
**Parameters:**
- `contentType` (path parameter, required, string): Type of content (e.g., "comment", "post", "thread").
- `searchText` (query parameter, required, string): Text to search for.
**Responses:**
- `200 OK`: Content retrieved successfully. Returns a list of matching content objects.
- `404 Not Found`: Content not found. Returns an error message.
**Example Request:**
GET /api/contents/search/post?searchText=sample
Authorization: Bearer <token>

[
    {
        "id": 1,
        "content": "Sample post content"
    }
]

### Get Recent Contents
**Endpoint:** `GET /api/contents/recent/{contentType}`
**Parameters:**
- `contentType` (path parameter, required, string): Type of content (e.g., "comment", "post", "thread").
- `pageable` (query parameter, optional, object): Pagination information (e.g., page number and size).
**Responses:**
- `200 OK`: Content retrieved successfully. Returns a paginated list of recent content objects.
- `404 Not Found`: Content not found. Returns an error message.
**Example Request:**
GET /api/contents/recent/post?page=0&size=10
Authorization: Bearer <token>

{
    "content": [
        {
            "id": 1,
            "content": "Recent post content"
        }
    ],
    "totalPages": 1,
    "totalElements": 1
}

### Get Paged Content by User
**Endpoint:** `GET /api/contents/user/{contentType}/get-paged-content-by-user/{userId}`
**Parameters:**
- `contentType` (path parameter, required, string): Type of content (e.g., "comment", "post", "thread").
- `userId` (path parameter, required, integer): The ID of the user.
- `pageable` (query parameter, optional, object): Pagination information (e.g., page number and size).
**Responses:**
- `200 OK`: Content retrieved successfully. Returns a paginated list of content objects created by the user.
- `404 Not Found`: Content not found. Returns an error message.
**Example Request:**
GET /api/contents/user/post/get-paged-content-by-user/1?page=0&size=10
Authorization: Bearer <token>

{
    "content": [
        {
            "id": 1,
            "content": "User's post content"
        }
    ],
    "totalPages": 1,
    "totalElements": 1
}

### Get Contents by Created Date Range
**Endpoint:** `GET /api/contents/created-at-between/{contentType}`
**Parameters:**
- `contentType` (path parameter, required, string): Type of content (e.g., "comment", "post", "thread").
- `start` (query parameter, required, string): Start date and time in ISO 8601 format.
- `end` (query parameter, required, string): End date and time in ISO 8601 format.
**Responses:**
- `200 OK`: Contents retrieved successfully. Returns a list of content objects created between the specified dates.
- `404 Not Found`: Content not found. Returns an error message.
**Example Request:**
GET /api/contents/created-at-between/post?start=2024-01-01T00:00:00Z&end=2024-01-31T23:59:59Z
Authorization: Bearer <token>

**Example Response:**
[
    {
        "id": 1,
        "content": "Content created in January 2024"
    }
]

### Get Contents by Text Search
**Endpoint:** `GET /api/contents/content-containing/{contentType}`
**Parameters:**
- `contentType` (path parameter, required, string): Type of content (e.g., "comment", "post", "thread").
- `text` (query parameter, required, string): Text to search for within the content.
**Responses:**
- `200 OK`: Contents retrieved successfully. Returns a list of content objects containing the specified text.
- `404 Not Found`: Content not found. Returns an error message.
**Example Request:**
GET /api/contents/content-containing/post?text=important
Authorization: Bearer <token>

[
    {
        "id": 1,
        "content": "Important content"
    }
]

### Delete Content by ID
**Endpoint:** `DELETE /api/contents/{contentType}/delete-content-by-id/{id}`
**Parameters:**
- `contentType` (path parameter, required, string): Type of content (e.g., "comment", "post", "thread").
- `id` (path parameter, required, integer): The ID of the content to delete.
**Responses:**
- `204 No Content`: Content deleted successfully.
- `404 Not Found`: Content not found. Returns an error message.
**Example Request:**
DELETE /api/contents/post/delete-content-by-id/1
Authorization: Bearer <token>

**Example Response:**
204 No Content

### List All Content of Type
**Endpoint:** `GET /api/contents/list-all-content-of-type/{contentType}`
**Parameters:**
- `contentType` (path parameter, required, string): Type of content (e.g., "comment", "post", "thread").
- `includeNested` (query parameter, optional, boolean): Whether to include nested content (default is false).
**Responses:**
- `200 OK`: Contents retrieved successfully. Returns a list of all content objects of the specified type.
- `404 Not Found`: Content not found. Returns an error message.
**Example Request:**
GET /api/contents/list-all-content-of-type/post?includeNested=true
Authorization: Bearer <token>

**Example Response:**
[
    {
        "id": 1,
        "content": "Content of the post"
    }
]

### Handle Vote
**Endpoint:** `POST /api/contents/{contentType}/{contentId}/vote`
**Parameters:**
- `contentType` (path parameter, required, string): Type of content (e.g., "comment", "post", "thread").
- `contentId` (path parameter, required, integer): The ID of the content to vote on.
- `userId` (query parameter, required, integer): The ID of the user voting.
- `isUpVote` (query parameter, required, boolean): true for upvote, false for downvote.
**Responses:**
- `200 OK`: Vote recorded successfully.
- `404 Not Found`: Content not found. Returns an error message.

**Example Request:**
POST /api/contents/post/1/vote?userId=1&isUpVote=true
Authorization: Bearer <token>


**Example Response:**
(empty response)

### Thread Controller

#### Create Thread
**Endpoint:** `POST /api/threads/`
**Parameters:**
- `threadTitle` (query parameter, required, string): The title of the new thread.
- `threadDescription` (query parameter, required, string): The description of the new thread.
**Responses:**
- `200 OK`: The thread has been created successfully.

**Example Request:**

POST /api/threads/
Authorization: Bearer <token>
Content-Type: application/x-www-form-urlencoded

threadTitle=Sample%20Thread&threadDescription=This%20is%20a%20sample%20thread

**Example Response:**
{
    "id": 1,
    "title": "Sample Thread",
    "description": "This is a sample thread"
}

#### Update Thread
**Endpoint:** `PUT /api/threads/{id}`
**Parameters:**
- `id` (path parameter, required, integer): The ID of the thread to update.
- `newTitle` (query parameter, required, string): The new title for the thread.
- `newDescription` (query parameter, required, string): The new description for the thread.
**Responses:**
- `200 OK`: Thread updated successfully. Returns the updated thread object.
- `404 Not Found`: Thread not found. Returns an error message.

**Example Request:**
PUT /api/threads/1?newTitle=Updated%20Title&newDescription=Updated%20Description
Authorization: Bearer <token>

**Example Response:**
{
    "id": 1,
    "title": "Updated Title",
    "description": "Updated Description"
}

#### Get Threads by Title
**Endpoint:** `GET /api/threads/title/{title}`
**Parameters:**
- `title` (path parameter, required, string): The title of the threads to retrieve.
**Responses:**
- `200 OK`: Threads retrieved successfully. Returns a list of threads with the matching title.
- `404 Not Found`: Threads not found. Returns an error message.
**Example Request:**
GET /api/threads/title/Sample%20Thread
Authorization: Bearer <token>

**Example Response:**
[
    {
    "id": 1,
    "title": "Sample Thread",
    "description": "This is a sample thread"
}
]

#### Get Threads by Description
**Endpoint:** `GET /api/threads/description/{description}`
**Parameters:**
- `description` (path parameter, required, string): The description of the threads to retrieve.
**Responses:**
- `200 OK`: Threads retrieved successfully. Returns a list of threads with the matching description.
- `404 Not Found`: Threads not found. Returns an error message.

**Example Request:**
GET /api/threads/description/Sample%20Description
Authorization: Bearer <token>

**Example Response:**
[
    {
        "id": 1,
        "title": "Sample Thread",
        "description": "This is a sample description"
    }
]


### Post Controller

### Add Post to Thread
**Endpoint:** `POST /add-post-to-thread`
**Parameters:**
- `threadId` (query parameter, required, integer): The ID of the thread to which the post will be added.
- `postContent` (query parameter, required, string): The content of the post.
**Responses:**
- `201 Created`: Post created successfully. Returns the newly created post object.
- `400 Bad Request`: Invalid input. Returns an error message.
- `404 Not Found`: Thread not found. Returns an error message.

**Example Request:**
POST /add-post-to-thread?threadId=1&postContent=This%20is%20a%20new%20post
Authorization: Bearer <token>

**Example Response:**
{
    "id": 1,
    "content": "This is a new post",
    "threadId": 1,
    "user": {
        "id": 1,
        "username": "user1"
    }
}

### Get Most Commented Posts
**Endpoint:** `GET /most-commented-posts`
**Parameters:**
- `pageableMostCommentedPostDTOs` (query parameter, optional, object): Pagination information (e.g., page number and size).
- `includeNestedComments` (query parameter, optional, boolean): Whether to include nested comments (default is true).
**Responses:**
- `200 OK`: Posts retrieved successfully. Returns a list of the most commented posts with their details.
- `403 Forbidden`: Access denied. Returns an error message.

**Example Request:**
GET /most-commented-posts?page=0&size=10&includeNestedComments=true
Authorization: Bearer <token>

**Example Response:**
[
    {
        "postId": 1,
        "postContent": "Post content with most comments",
        "commentCount": 25
    },
    {
        "postId": 2,
        "postContent": "Another post with many comments",
        "commentCount": 20
    }
]


### Comment Controller

### Add Comment to Post
**Endpoint:** `POST /api/comments/add-comment-to-post`
**Parameters:**
- `postId` (query parameter, required, integer): The ID of the post to which the comment will be added.
- `commentContent` (query parameter, required, string): The content of the comment.
**Responses:**
- `201 Created`: Comment created successfully. Returns the newly created comment object.
- `400 Bad Request`: Invalid input. Returns an error message.
- `404 Not Found`: Post not found. Returns an error message.

**Example Request:**
POST /api/comments/add-comment-to-post?postId=1&commentContent=This%20is%20a%20comment
Authorization: Bearer <token>

**Example Response:**
{
    "id": 1,
    "content": "This is a comment",
    "postId": 1,
    "user": {
        "id": 1,
        "username": "user1"
    }
}


### User Controller

#### User Login
**Endpoint:** `POST /api/users/login`
**Parameters:**
- `username` (query parameter, required, string): The username of the user.
- `password` (query parameter, required, string): The password of the user.
**Responses:**
- `200 OK`: Logged in successfully. Returns a JWT token in the Authorization header.
- `401 Unauthorized`: Invalid credentials. Returns an error message.

**Example Request:**
POST /api/users/login?username=user1&password=pass123
Authorization: Bearer <token>

**Example Response:**
{
    "message": "Logged in Successfully"
}

#### Register User
**Endpoint:** `POST /api/users/register-user`
**Parameters:**
- `username` (query parameter, required, string): The username for the new user.
- `password` (query parameter, required, string): The password for the new user.
**Responses:**
- `200 OK`: User registered successfully. Returns the created user object.

**Example Request:**
POST /api/users/register-user?username=newuser&password=pass123
Authorization: Bearer <token>

**Example Response:**
{
    "id": 2,
    "username": "newuser"
}

#### Get User by ID
**Endpoint:** `GET /api/users/get-user-by-id/{id}`
**Parameters:**
- `id` (path parameter, required, integer): The ID of the user to retrieve.
**Responses:**
- `200 OK`: User retrieved successfully. Returns the user object.

**Example Request:**
GET /api/users/get-user-by-id/1
Authorization: Bearer <token>

**Example Response:**
{
    "id": 1,
    "username": "user1"
}

#### Get User by Username
**Endpoint:** `GET /api/users/get-user-by-username/{username}`
**Parameters:**
- `username` (path parameter, required, string): The username of the user to retrieve.
**Responses:**
- `200 OK`: User retrieved successfully. Returns the user object.

**Example Request:**
GET /api/users/get-user-by-username/user1
Authorization: Bearer <token>

**Example Response:**
{
    "id": 1,
    "username": "user1"
}

#### Get Users by Status
**Endpoint:** `GET /api/users/status/{status}`
**Parameters:**
- `status` (path parameter, required, enum): The status to filter users by.
**Responses:**
- `200 OK`: Users retrieved successfully. Returns a list of user objects.
- `400 Bad Request`: Invalid status. Returns an error message.
- `500 Internal Server Error`: An error occurred. Returns an error message.

**Example Request:**
GET /api/users/status/ONLINE
Authorization: Bearer <token>

**Example Response:**
[
    {
        "id": 1,
        "username": "user1",
        "status": "ONLINE"
    }
]

#### Get Users by Account Status
**Endpoint:** `GET /api/users/account-status/{accountStatus}`
**Parameters:**
- `accountStatus` (path parameter, required, enum): The account status to filter users by.
**Responses:**
- `200 OK`: Users retrieved successfully. Returns a list of user objects.

**Example Request:**
GET /api/users/account-status/ACTIVE
Authorization: Bearer <token>

**Example Response:**
[
    {
        "id": 1,
        "username": "user1",
        "accountStatus": "ACTIVE"
    }
]

#### Delete User by ID
**Endpoint:** `DELETE /api/users/{id}`
**Parameters:**
- `id` (path parameter, required, integer): The ID of the user to delete.
**Responses:**
- `204 No Content`: User deleted successfully.

**Example Request:**
DELETE /api/users/1
Authorization: Bearer <token>

**Example Response:**
{
    "message": "User deleted successfully"
}

#### Delete User by Username
**Endpoint:** `DELETE /api/users/username/{username}`
**Parameters:**
- `username` (path parameter, required, string): The username of the user to delete.
**Responses:**
- `200 OK`: Deletion successful. Returns a confirmation message.

**Example Request:**
DELETE /api/users/username/user1
Authorization: Bearer <token>

**Example Response:**
{
    "message": "Deletion successful"
}


### Role Controller

### Add New Role Type
**Endpoint:** `POST /api/roles/add-role-type`
**Request Body:**
- `role` (object, required): The role object containing details of the new role.
**Responses:**
- `201 Created`: Role created successfully.
- `400 Bad Request`: Invalid input. Returns an error message.
- `403 Forbidden`: Access forbidden. User does not have permission to perform this action.
- `404 Not Found`: User or role not found. Returns an error message.

**Example Request:**
POST /api/roles/add-role-type
Authorization: Bearer <token>
Content-Type: application/json

{
    "roleName": "MODERATOR",
    "permissions": ["READ", "WRITE"]
}

**Example Response:**
{
    "message": "Role created successfully"
}

### Add Role to User
**Endpoint:** `POST /api/roles/roles/add-role-to-user`
**Request Body:**
- `roleToUserDTO` (object, required): Contains the username and roleName to assign.
**Responses:**
- `204 No Content`: Role assigned to user successfully.
- `400 Bad Request`: Invalid input. Returns an error message.
- `404 Not Found`: User or role not found. Returns an error message.

**Example Request:**
POST /api/roles/roles/add-role-to-user
Authorization: Bearer <token>
Content-Type: application/json

{
    "username": "user1",
    "roleName": "ADMIN"
}

**Example Response:**
{
    "message": "Role assigned to user successfully"
}

### Get Users by Role
**Endpoint:** `GET /api/roles/get-user-by-role/{role}`
**Parameters:**
- `role` (path parameter, required, string): The role to filter users by.
**Responses:**
- `200 OK`: Users retrieved successfully. Returns a list of users with their roles.
- `404 Not Found`: Role not found. Returns an error message.

**Example Request:**
GET /api/roles/get-user-by-role/ADMIN
Authorization: Bearer <token>

**Example Response:**
[
    {
        "username": "user1",
        "roleName": "ADMIN"
    },
    {
        "username": "user2",
        "roleName": "ADMIN"
    }
]

### Get All Role Types
**Endpoint:** `GET /api/roles/get-all-role-types`
**Responses:**
- `200 OK`: Roles retrieved successfully. Returns a list of all available role types.

**Example Request:**
GET /api/roles/get-all-role-types
Authorization: Bearer <token>

**Example Response:**
[
    {
        "roleName": "USER",
        "permissions": ["READ"]
    },
    {
        "roleName": "ADMIN",
        "permissions": ["READ", "WRITE", "DELETE"]
    }
]
